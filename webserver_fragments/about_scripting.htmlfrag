
<h2>Luau scripting</h2>
<p>
The newest and the most powerful form of scripting in Substrata is Luau scripting.  Luau scripts can achieve complex and rich behaviour, reacting to various types of events.  
You can even create complete games in Luau in Substrata.
</p>

<a href="/about_luau_scripting">Read more about Luau scripting</a>

<h2>Winter Scripting</h2>

<p>Winter scripting can achieve basic, non-reactive behaviour, such as rotating or periodically moving objects.  Winter scripting uses our <a href="https://github.com/glaretechnologies/winter">Winter programming language</a>.
</p>

<p>See the <a href="https://github.com/glaretechnologies/winter/blob/master/docs/language_reference.md">Winter language reference documentation on Github</a>.


<h3>Client-side execution</h3>
<p>Winter scripts in Substrata are executed in the Substrata client program (e.g. they are executed 'client-side').  
Winter programs are restricted in what they can do, so are safe to execute client-side.  
(Although we can't rule out all bugs in the Winter execution environment)</p><h3>Scripting an object</h3><p>To make a script for an object, you edit code in the 'Script' text edit box in the object editor in the Substrata client, 
after selecting an object.   
You can only edit scripts on objects that you own (e.g. that you created).</p>

<h3>Scriptable functions</h3>
<p>To script the behaviour of an object, you can define either of two functions:
</p>

<div class="code-func-definition">def evalRotation(float time, WinterEnv env) vec3</div>

<p>time is the
current global time in the Substrata metaverse.
</p>
<p>This function returns a 3-vector, where the direction of the vector defines the axis of rotation, and the length of the vector defines the counter-clockwise rotation around the axis, in radians.
</p>
<p>
For example, the rotating wind turbine blades use the following script:

<pre class="code-block">def evalRotation(float time, WinterEnv env) vec3 : vec3(-0.6, 0.0, 0.0) * time</pre>

<p>This rotates the blades clockwise (due to the minus sign) around the x axis at a constant rate.</p>

<div class="code-func-definition">def evalTranslation(float time, WinterEnv env) vec3</div>

<p>This function returns a 3-vector, 
which defines a spatial translation from the usual position of an object (as placed by a user or entered in the object editor).  
The translation can be a function of time  to allow object movement.</p><p>For example, this script makes an object move back and forth along the x axis by a total of 1.6 metres:
</p>

<pre class="code-block">
def evalTranslation(float time, WinterEnv env) vec3 : vec3(sin(time * 1.5) * 0.8, 0, 0)
</pre>

<br/>
<hr/>
<br/>



<h2>Vehicle Scripting</h2>

See <a href="/vehicle_scripting">Vehicle Scripting</a> for more details.


<br/>
<hr/>
<br/>


<h2>XML Scripting: Follow Path Script</h2>

<p>You can also use XML to define some behaviours for an object, for example make the object follow a path around the world.  (This is the kind of script that the monorail uses)</p>
<p>
The following is a script that makes an object continuously follow a square shaped path:
</p>

<pre class="code-block">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;script&gt;
	&lt;follow_path&gt;
		&lt;speed&gt;3&lt;/speed&gt;

		&lt;waypoint&gt;&lt;pos&gt;0 0 1&lt;/pos&gt;	&lt;type&gt;Stop&lt;/type&gt;	&lt;pause_time&gt;1&lt;/pause_time&gt;	&lt;/waypoint&gt;
		&lt;waypoint&gt;&lt;pos&gt;10 0 1&lt;/pos&gt;	&lt;type&gt;Stop&lt;/type&gt;	&lt;pause_time&gt;1&lt;/pause_time&gt;	&lt;/waypoint&gt;
		&lt;waypoint&gt;&lt;pos&gt;10 10 1&lt;/pos&gt;	&lt;type&gt;Stop&lt;/type&gt;	&lt;pause_time&gt;1&lt;/pause_time&gt;	&lt;/waypoint&gt;
		&lt;waypoint&gt;&lt;pos&gt;0 10 1&lt;/pos&gt;	&lt;type&gt;Stop&lt;/type&gt;	&lt;pause_time&gt;1&lt;/pause_time&gt;	&lt;/waypoint&gt;
	&lt;/follow_path&gt;
&lt;/script&gt;
</pre>

<p>Each waypoint has the position of the waypoint, what type of waypoint it is, and in the case of 'Stop' waypoints, how long the object will stop at the waypoint before continuing.
</p>

<p>The &lt;speed&gt;3&lt;/speed&gt; tag also sets the default speed of the object along the path, although this can be overridden for each waypoint.
</p>

<br/>
<hr/>
<br/>



<h2 id="dynamic-texture-updating">Dynamic Texture Updating</h2>


<p>This is an XML script that allows image textures on objects in the world to be updated occasionally from an external web server.</p>

<p>In the example script below, the URL https://images.metaverse-billboards.com/space1.png is periodically checked for a new image.</p>

<pre class="code-block">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;script&gt;
	&lt;dynamic_texture_update&gt;
		&lt;base_url&gt;https://images.metaverse-billboards.com/space1.png&lt;/base_url&gt;
		&lt;material_index&gt;0&lt;/material_index&gt; &lt;!-- optional --&gt;
		&lt;material_texture&gt;colour&lt;/material_texture&gt; &lt;!-- optional, can be 'colour' or 'emission' --&gt;
	&lt;/dynamic_texture_update&gt;
&lt;/script&gt;
</pre>

	<p>
		To make an object with a dynamically updating texture:
		From the Substrata client, add an image object in the usual way: 'Add Model/Image/Video' toolbar button, then select 'from disk' tab and select a placeholder image.
		Then edit the script field to add the script above.
	</p>
	<p>
		Your user account needs to be whitelisted by a Substrata admin for this script to work.
		Message @nick on our Discord server, or contact us at contact@glaretechnologies.com to request this.
	</p>
	<p>
		Images are checked from the URL given by 'base_url' for updates approximately every hour.  If an updated image is returned by the webserver, then the updated image will be inserted into Substrata
as a resource, and the updated image will be applied to the object.
	</p>


	<br/>
<hr/>
<br/>



<a href="/">&lt; Home</a>																			
